import streamlit as st
import pandas as pd
import yfinance as yf
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üåü Taxazero Pro ‚Äî Comparador Completo de Renda Fixa",
    page_icon="üåü",
    layout="centered"
)

st.title("üåü Taxazero Pro ‚Äî Comparador Completo de Renda Fixa")
st.markdown("Compare LCA, LCI e CDBs ‚Äî veja qual d√° mais ganho l√≠quido em 1, 2 ou 3 anos.")

# Carrega o CSV
try:
    df = pd.read_csv("ofertas_btg.csv")
except FileNotFoundError:
    st.error("‚ùå Arquivo 'ofertas_btg.csv' n√£o encontrado!")
    st.stop()

# Verifica se as colunas essenciais existem
colunas_esperadas = ['nome', 'tipo', 'rentabilidade', 'liquidez', 'vencimento', 'minimo', 'isencao_ir', 'lastro']
faltando = [col for col in colunas_esperadas if col not in df.columns]

if faltando:
    st.error(f"‚ùå Colunas ausentes no arquivo CSV: {faltando}")
    st.write("üîç Verifique se o arquivo `ofertas_btg.csv` est√° salvo em UTF-8 puro.")
    st.code("""nome,tipo,rentabilidade,liquidez,vencimento,minimo,isencao_ir,lastro,data_atualizacao
LCI Di√°ria BTG,LCI,110% CDI,Di√°ria,-,R$ 1.000,Sim,Imobili√°rio,06/05/2025 14:30
LCA BTG 115% CDI,LCA,115% CDI,720 dias,14/12/2026,R$ 500,Sim,Agroneg√≥cio,06/05/2025 14:30
CDB Inter 110% CDI,CDB,110% CDI,Di√°ria,365 dias,R$ 1.000,N√£o,,06/05/2025 14:30""")
    st.stop()

# Obt√©m CDI atual (uso correto do s√≠mbolo BRL=X)
try:
    cdi = yf.download("BRL=X", period="1y", progress=False)
    daily_returns = cdi['Close'].pct_change().dropna()
    if len(daily_returns) == 0:
        raise ValueError("Dados do CDI vazios")
    annualized_cdi = ((1 + daily_returns).prod()) ** (252 / len(daily_returns)) - 1
    cdi_percent = annualized_cdi * 100
except Exception as e:
    st.warning(f"‚ö†Ô∏è N√£o consegui buscar o CDI: {e}")
    annualized_cdi = 0.105  # Fallback: 10,5%
    cdi_percent = 10.5

st.info(f"üìà CDI atual (12 meses): {cdi_percent:.3f}%")

# --- FILTROS ---
col1, col2 = st.columns(2)

with col1:
    filtro_tipo = st.selectbox(
        "Tipo de investimento:",
        options=["Todos", "LCA/LCI (isen√ß√£o)", "CDB (com IR)"],
        index=0
    )

with col2:
    filtro_liquidez = st.selectbox(
        "Liquidez:",
        options=["Todas", "Di√°ria"],
        index=0
    )

# Aplica filtros
df_filtrado = df.copy()

if filtro_tipo == "LCA/LCI (isen√ß√£o)":
    df_filtrado = df_filtrado[df_filtrado['isencao_ir'] == 'Sim']
elif filtro_tipo == "CDB (com IR)":
    df_filtrado = df_filtrado[df_filtrado['isencao_ir'] == 'N√£o']

if filtro_liquidez == "Di√°ria":
    df_filtrado = df_filtrado[df_filtrado['liquidez'] == 'Di√°ria']

# Contador
st.info(f"‚úÖ {len(df_filtrado)} ofertas encontradas")

# --- SIMULA√á√ÉO DE PRAZO ---
st.markdown("---")
st.subheader("üí∞ Simulador de Ganho L√≠quido (1, 2 ou 3 anos)")

valor = st.number_input(
    "Quanto voc√™ quer aplicar? (R$)",
    min_value=1000,
    value=50000,
    step=1000,
    help="Insira o valor que deseja investir."
)

prazo_anos = st.slider(
    "Prazo da aplica√ß√£o:",
    min_value=1,
    max_value=3,
    value=1,
    step=1,
    help="Veja o rendimento em 1, 2 ou 3 anos."
)

# Fun√ß√£o para calcular rendimento
def calcular_rendimento(taxa_cd, prazo, isencao_ir, valor):
    taxa_decimal = float(taxa_cd.replace("% CDI", "")) / 100
    rent_bruta = (1 + taxa_decimal * annualized_cdi) ** prazo
    ganho_bruto = valor * (rent_bruta - 1)
    
    if isencao_ir == "Sim":
        ganho_liquido = ganho_bruto
        ir_pago = 0
    else:
        ir_aliquota = 0.225 if valor > 20000 else 0.15
        ir_pago = ganho_bruto * ir_aliquota
        ganho_liquido = ganho_bruto - ir_pago
    
    total_final = valor + ganho_liquido
    return ganho_liquido, ir_pago, total_final

# Exibe resultados
resultados = []

for idx, row in df_filtrado.iterrows():
    nome = row['nome']
    tipo = row['tipo']
    rentabilidade = row['rentabilidade']
    isencao_ir = row['isencao_ir']
    
    try:
        ganho_liquido, ir_pago, total_final = calcular_rendimento(rentabilidade, prazo_anos, isencao_ir, valor)
        resultados.append({
            "Nome": nome,
            "Tipo": tipo,
            "Rentabilidade": rentabilidade,
            "Isento de IR?": "Sim" if isencao_ir == "Sim" else "N√£o",
            "Ganho L√≠quido": ganho_liquido,
            "IR Pago": ir_pago,
            "Total Final": total_final
        })
    except:
        continue

if resultados:
    df_resultados = pd.DataFrame(resultados)
    df_resultados = df_resultados.sort_values(by="Ganho L√≠quido", ascending=False)

    # Exibe tabela ‚Äî USANDO width="stretch" em vez de use_container_width
    st.dataframe(
        df_resultados[
            ["Nome", "Tipo", "Rentabilidade", "Isento de IR?", "Ganho L√≠quido", "IR Pago", "Total Final"]
        ].style.format({
            "Ganho L√≠quido": "R$ {:,.2f}",
            "IR Pago": "R$ {:,.2f}",
            "Total Final": "R$ {:,.2f}"
        }),
        width="stretch",  # ‚úÖ Corre√ß√£o: substitui use_container_width=True
        hide_index=True
    )

    # Melhor op√ß√£o
    melhor = df_resultados.iloc[0]
    st.success(f"""
    üèÜ **MELHOR OP√á√ÉO PARA {prazo_anos} ANOS:**  
    **{melhor['Nome']}** ‚Üí Ganho l√≠quido de **R$ {melhor['Ganho L√≠quido']:,.2f}**  
    {'‚ú® Isento de IR!' if melhor['Isento de IR?'] == 'Sim' else f'üí∏ IR pago: R$ {melhor["IR Pago"]:,.2f}'}
    """)

else:
    st.warning("üîç Nenhuma oferta encontrada com os crit√©rios selecionados.")

# --- INFORMA√á√ÉO EXTRA ---
st.markdown("---")
st.caption("üí° Dica: LCA e LCI s√£o isentas de IR ‚Äî mesmo que a taxa seja menor que um CDB, voc√™ pode ganhar mais l√≠quido!")
st.caption("üìä Dados atualizados conforme arquivo CSV e CDI do Yahoo Finance.")
st.caption("üöÄ Projeto open source ‚Äî constru√≠do com Python e Streamlit.")
